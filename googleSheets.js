const {uuidv4} = require('uuid')
const dbManager = require('./dbManager')

const {readFileSync} = require('fs')
const {GoogleSpreadsheet} = require('google-spreadsheet');
const {ObjectId} = require("mongodb");

// Initialize the sheet - doc ID is the long id in the sheets URL
const PRIVATE_KEY = JSON.parse(readFileSync('./credentials.json').toString()).private_key

const doc = new GoogleSpreadsheet('1Letf6vt8bB2VbCBCApFKgKWdXxSqXgoLkofxWPogtDE');

async function rowsFinderByModelName(rows, name) {
    for (let row of rows) {
        if (row._rawData[0] === name) {
            return row
        }
    }
    return null
}

async function rowsFinderByUuid(rows, uuid) {
    for (let row of rows) {
        if (row._rawData[0] === uuid) {
            return row
        }
    }
    return null
}

module.exports.rowsFinderByModelName = rowsFinderByModelName

/*
module.exports.uploadStatistics = async function uploadStatistics() {
    const db = await dbManager()
    const doc = new GoogleSpreadsheet('1SHuAOJdfAon64k2O3c-1QgU2prFYYwO67CcrgJZmtWw');

    await doc.useServiceAccountAuth({
        // env var values are copied from service account credentials generated by google
        // see "Authentication" section in docs for more info
        client_email: 'content-uploader@silent-window-343302.iam.gserviceaccount.com',
        private_key: PRIVATE_KEY
    });

    try {
        await doc.loadInfo(); // loads document properties and worksheets
        const sheet = doc.sheetsByIndex[0]
        let rows = await sheet.getRows()
        console.log(rows, 'thishappen')

        for (let order of await db.orders.find().toArray()) {
            try {
                if (!order.uuid) {
                    continue
                }
                let modelData = await db.users.findOne(order.model)
                const row = await rowsFinderByModelName(rows, modelData.name)
                if (row) {
                    row._rawData = [modelData.name, order.uuid]
                    row.save()
                } else {
                    let data = [modelData.name]
                    await sheet.addRow(data)
                }
            } catch (e) {
                console.log(e)
            }
        }
    } catch (e) {
        console.log(e)
    }

    return null
}
 */


module.exports.uploadUsersStatistics = async () => {
    const db = await dbManager
    const doc = new GoogleSpreadsheet('1SHuAOJdfAon64k2O3c-1QgU2prFYYwO67CcrgJZmtWw');

    await doc.useServiceAccountAuth({
        // env var values are copied from service account credentials generated by google
        // see "Authentication" section in docs for more info
        client_email: 'new-account@brend-new-one.iam.gserviceaccount.com',
        private_key: PRIVATE_KEY
    });

    try {
        await doc.loadInfo(); // loads document properties and worksheets
        const sheet = doc.sheetsByIndex[0]
        let rows = await sheet.getRows()

        for (let model of await db.users.find({role: 'model'}).toArray()) {
            const row = await rowsFinderByModelName(rows, model.name)
            if (row) {
                row._rawData = [model.name, model.statistics['1'].photos, model.statistics['1'].videos,
                    model.statistics['2'].photos, model.statistics['2'].videos,
                    model.statistics['3'].photos, model.statistics['3'].videos,
                    model.statistics['4'].photos, model.statistics['4'].videos,
                    model.statistics['ad'].photos, model.statistics['ad'].videos,
                    model.statistics['ad'].photos]
                row.save()
            } else {
                let data = [model.name, model.statistics['1'].photos, model.statistics['1'].videos,
                    model.statistics['2'].photos, model.statistics['2'].videos,
                    model.statistics['3'].photos, model.statistics['3'].videos,
                    model.statistics['4'].photos, model.statistics['4'].videos,
                    model.statistics['ad'].photos, model.statistics['ad'].videos,
                    model.statistics['ad'].photos, model.statistics['ad'].videos
                ]
                await sheet.addRow(data)
            }
        }
    } catch (e) {
        console.log(e)
    }

    return null
}
module.exports.uploadOrdersStatistics = async () => {
    const db = await dbManager
    const doc = new GoogleSpreadsheet('1SHuAOJdfAon64k2O3c-1QgU2prFYYwO67CcrgJZmtWw');

    await doc.useServiceAccountAuth({
        // env var values are copied from service account credentials generated by google
        // see "Authentication" section in docs for more info
        client_email: 'new-account@brend-new-one.iam.gserviceaccount.com',
        private_key: PRIVATE_KEY
    });

    try {
        await doc.loadInfo(); // loads document properties and worksheets
        const sheet = doc.sheetsByIndex[1]
        let rows = await sheet.getRows()


        for (let order of await db.orders.find().toArray()) {
            const row = await rowsFinderByUuid(rows, order.uuid)
            let readableDate = (new Date(order.creationTime * 1000)).toString().replace('T', '').replace('.000Z', '')
            if (row) {
                row._rawData = [order.uuid, order.script, order.price,  order?.paid || '', order?.timeSpent || '', order.memberUrl, readableDate, order?.doneDate || '', order.status]
                row.save()
            } else {
                let data = [order.uuid, order.script, order.price, order?.paid || '', order?.timeSpent || '', order.memberUrl,readableDate, order?.doneDate || '', order.status]
                await sheet.addRow(data)
            }
        }
    } catch (e) {
        console.log(e)
    }

    return null
}